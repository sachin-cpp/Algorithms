int vis[1001][1001];
int dist[1001][1001];
int n;
// int dx[9]={2,2,1,-1,-2,-2,-1,1};
// int dy[9]={1,-1,-2,-2,-1,1,2,2};

int dx[8]={-2,-1,1,2,2,1,-1,-2};
int dy[8]={1,2,2,1,-1,-2,-2,-1};


bool isValid(int a,int b)
{
    if(a<1 || b<1 || a>n || b>n ) return false;
    if(vis[a][b]==1) return false;
    
    return true;
}

    void dfs(int a,int b)
    {
        vis[a][b]=1;
        dist[a][b]=0;
        queue<pair<int,int>> q;
        q.push({a,b});
        
        while(!q.empty())
        {
            int x=q.front().first;
            int y=q.front().second;
            q.pop();
            
            for(int i=0;i<8;i++)
            {
                int nx=x+dx[i];
                int ny=y+dy[i];
                
                if(isValid(nx,ny))
                {
                    dist[nx][ny] = dist[x][y] + 1;
                    vis[nx][ny]=1;
                    q.push({nx,ny});
                }
                
                
            }
        }
        
    }
    
	int minStepToReachTarget(vector<int>&KnightPos, vector<int>&TargetPos, int N)
	{
	    n=N;
	    
	    for (int i = 1; i <= N; i++)
        for (int j = 1; j <= N; j++)
        {
            vis[i][j] = 0;
            dist[i][j] = 0;
        }
            
	    //dfs(1,1);
	    
	    //return dist[3][2];
	    dfs(KnightPos[0],KnightPos[1]);
	    
	    return dist[TargetPos[0]][TargetPos[1]];
	}
