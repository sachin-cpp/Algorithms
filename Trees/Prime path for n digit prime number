#include <iostream>
#include<bits/stdc++.h>
using namespace std;

vector<int> dist(10000);
vector<int> vis(10000);

int dfs(int a,int b,vector<vector<int>> &ans)
{
    vis[a]=1;
    dist[a]=0;
    queue<int> q;
    q.push(a);
    while(!q.empty())
    {
        int temp=q.front();
        q.pop();
        for(int child:ans[temp])
        {
            if(vis[child]==0)
            {
                vis[child]=1;
                dist[child]=dist[temp]+ 1 ;
                q.push(child);
            }
        }
    }
    return dist[b];
}


bool isPrime(int i)
{
    for(int j=2;j*j<i;j++)
    {
        if(i%j==0) return false;
    }
    return true;
}

bool isValid(int a,int b)
{
    int cnt=0;
    while(a>0 && b>0)
    {
        if(a%10==b%10) cnt++;
        
        a=a/10;
        b=b/10;
    }
    if(cnt==1) return true;
    else return false;
}

vector<vector<int>> makeGraph(vector<int> &v)
{
    vector<vector<int>> mp(v.size());
    for(int i=0;i<v.size()-1;i++)
    {
        for(int j=i+1;j<v.size();j++)
        {
            if(isValid(v[i],v[j]))
            {
                mp[v[i]].push_back(v[j]);
                mp[v[j]].push_back(v[i]);
                
            }
        }
    }
    return mp;
}

int main() 
{
    int a,b;
    cin>>a>>b;
    vector<int> v;
    
    for(int i=1000;i<=9999;i++)
    {
        if(isPrime(i)) v.push_back(i);
    }
    vector<vector<int>> ans = makeGraph(v);
    
    
    cout<<dfs(a,b,ans);
    
	
	return 0;
}
