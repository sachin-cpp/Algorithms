
#include <limits.h> 
#include <stdio.h> 
#include <iostream>
using namespace std;
#define V 9 

int min(int dist[], bool visited[] )
{
    int m = 999;
    int min_index=0;
    for(int i=0;i<V;i++)
    {
        if(visited[i] == false)
        {
            if(dist[i] < m)
            {
                m = dist[i];
                min_index = i;
            }
        }
    }
    return min_index;
}
void print(int dist[]) 
{ 
    for (int i = 0; i < V; i++)
    {
        cout<<dist[i]<<" ";
    }

        
    
} 

void dijkstra(int graph[V][V], int src)
{
    int dist[V];
    bool visited[V];
    
    for(int i=0;i<V;i++)
    {
        dist[i] = INT_MAX ;
        visited[i] = false;
    }
    dist[src] = 0;
    //visited[src] = true;
    
    for(int count=0;count<V;count++)
    {
        int u = min(dist,visited);
        
        visited[u] =  true;
        
        for(int i=0;i<V;i++)
        {
            if((visited[i] == false) && (graph[u][i] != 0) && (dist[u] + graph[u][i] < dist[i]))
            {
                dist[i] = dist[u] + graph[u][i];
            }
        }
    }
    print(dist);
}
 
int main() 
{ 
	
	int graph[V][V] = { { 0, 4, 0, 0, 0, 0, 0, 8, 0 }, 
						{ 4, 0, 8, 0, 0, 0, 0, 11, 0 }, 
						{ 0, 8, 0, 7, 0, 4, 0, 0, 2 }, 
						{ 0, 0, 7, 0, 9, 14, 0, 0, 0 }, 
						{ 0, 0, 0, 9, 0, 10, 0, 0, 0 }, 
						{ 0, 0, 4, 14, 10, 0, 2, 0, 0 }, 
						{ 0, 0, 0, 0, 0, 2, 0, 1, 6 }, 
						{ 8, 11, 0, 0, 0, 0, 1, 0, 7 }, 
						{ 0, 0, 2, 0, 0, 0, 6, 7, 0 } }; 

	dijkstra(graph, 0); 

	return 0; 
} 
